
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ManualMapInjection.Injection;
using System.Net;
using System.IO;
using System.Diagnostics;
using injector;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;
using System.Threading;

namespace WindowsFormsApp2
{
    public partial class Form1 : Form
    {
        private string pathToDll = "C:\\Windows\\Bloodnight.dll";
        private string pathToExecutable = "C:\\Windows\\Blood_inj.exe";
        private string HWID;
        private Process openedProcess;
        private bool isMonitoring = true;

        public Form1()
        {
            InitializeComponent();
            this.FormClosing += Form1_FormClosing;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            HWID = System.Security.Principal.WindowsIdentity.GetCurrent().User.Value;
            textBox1.Text = HWID;
            textBox1.ReadOnly = true;
            CheckOnline();

            // Inicia o monitoramento em segundo plano
            Thread monitorThread = new Thread(MonitorGameProcess);
            monitorThread.Start();
        }

        private async void button1_Click(object sender, EventArgs e)
        {
            CheckOnline();
            WebClient wb = new WebClient();
            string urlToDownload = wb.DownloadString("https://raw.githubusercontent.com/nighthawkdev6/CSGO-hax/main/cheatatt.txt");

            if (string.IsNullOrEmpty(urlToDownload) || urlToDownload.Trim() == "")
            {
                MessageBox.Show("Software em atualização, voltamos em breve.", "BLOODNIGHT!", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            string HWIDLIST = wb.DownloadString("https://raw.githubusercontent.com/nighthawkdev6/CSGO-hax/main/hwidMACRO");
            string userHWID = textBox1.Text.Trim();

            string urlDll = wb.DownloadString("https://raw.githubusercontent.com/nighthawkdev6/CSGO-hax/main/attLOL");

            if (string.IsNullOrEmpty(urlDll) || urlDll.Trim() == "")
            {
                MessageBox.Show("Software em atualização, voltamos em breve.", "BLOODNIGHT", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            wb.DownloadFile(urlDll, pathToDll);

            if (VerifyHWID(userHWID, HWIDLIST))
            {
                wb.DownloadFile(urlToDownload, pathToExecutable);

                MessageBox.Show("Carregado com sucesso! :]", "Bom game!", MessageBoxButtons.OK, MessageBoxIcon.Information);

                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = pathToExecutable;

                openedProcess = Process.Start(startInfo);
                openedProcess.EnableRaisingEvents = true;
                openedProcess.Exited += new EventHandler(ProcessExited);
                // Fecha o aplicativo após iniciar o jogo
                Application.Exit();
            }
            else
            {
                MessageBox.Show("Key não ativada no sistema! Acesso negado.", "BLOODNIGHT", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void MonitorGameProcess()
        {
            while (isMonitoring)
            {
                Thread.Sleep(2000);

                if (openedProcess != null && !openedProcess.HasExited)
                {
                    openedProcess.Refresh();
                }
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true; // Cancela o fechamento do formulário
            this.WindowState = FormWindowState.Minimized; // Minimiza o formulário para a bandeja do sistema (tray)
            this.Hide(); // Oculta o formulário
        }

       private void ProcessExited(object sender, EventArgs e)
{
    try
    {
        // Exclui o executável
        if (File.Exists(pathToExecutable))
        {
            File.Delete(pathToExecutable);
          
        }

        // Exclui a DLL
        if (File.Exists(pathToDll))
        {
            File.Delete(pathToDll);
           
        }
    }
    catch (Exception ex)
    {

    }
}

        private bool VerifyHWID(string userHWID, string hwidList)
        {
            string[] hwids = hwidList.Split('\n');
            foreach (string hwid in hwids)
            {
                if (hwid.Trim().Equals(userHWID))
                {
                    return true;
                }
            }
            return false;
        }

        private void CheckOnline()
        {
            try
            {
                using (var client = new WebClient())
                {
                    using (client.OpenRead("https://google.com/"))
                    {
                        label1.ForeColor = System.Drawing.Color.Purple;
                        label1.Text = ("Online");
                    }
                }
            }
            catch
            {
                label1.ForeColor = System.Drawing.Color.Red;
                label1.Text = ("Offline");
                Application.Exit();
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Clipboard.SetText(HWID);
            MessageBox.Show("Chave-KEY copiada.", "BLOODNIGHT", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label2_Click(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void button4_Click(object sender, EventArgs e)
        {
            MessageBox.Show("------------------------- Lista de Comandos --------------------------\r\n\r\nRapid Fire - F2 (Segure o mouse do meio para disparar rápido)\r\n\r\nPerfect 180 turnaround - F3  (Pressione T para fazer o 180º)\r\n\r\nAK-47 - F4\r\n\r\nM4A1-S - F6\r\n\r\nM4A4 - F7\r\n\r\nFamas - F8\r\n\r\nGalil  - F9\r\n\r\nUMP-45 - F12\r\n\r\nAUG - Home\r\n\r\nSG 553 - End\r\n\r\nModificador de zoom AUG e SG 553 - ALT Esquerdo (Mantenha pressionado quando estiver no scope com AUG ou SG 553)\r\n\r\nDesativar No-Recoil - F11\r\n\r\nPanic button - F10 (Fechar macro)", "BLOODNIGHT", MessageBoxButtons.OK, MessageBoxIcon.Question);
        }
    }
}
